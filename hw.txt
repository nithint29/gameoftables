1)
CREATE TRIGGER RomTrig
AFTER DELETE ON Characters
REFERENCING OLD ROW AS oldTuple
FOR EACH ROW
UPDATE Romances
BEGIN
SET name1 = 'Jon', surname1 = 'Snow'
WHERE name1 = oldTuple.name AND surname1 = oldTuple.surname
SET name2 = 'Daenerys', surname2 = 'Targaryen'
WHERE name2 = oldTuple.name AND surname2 = oldTuple.surname
END;

2)
CREATE TABLE Romances (
	name1		CHAR(20),
	surname1	CHAR(20),
	name2		CHAR(20),
	surname2	CHAR(20),
	FOREIGN KEY(name1, surname1) REFERENCES Characters(name, surname),
	FOREIGN KEY(name2, surname2) REFERENCES Characters(name, surname));

3)
NOT EXISTS (
		SELECT name1, surname1, name2, surname2
		FROM Romances
		WHERE surname1 = surname2 )

4) Our code checks, while the romance values are being created, if the surnames match.
If they do, a new romance is rerolled until the surnames do not match. However, if the surnames are "Lannister" or "Targaryen", the surnames are allowed to match, reflecting Game of Thrones' houses.

Also, we provided a function called 'assertion' to verify that the pattern holds. It takes our data as input(potentially after a new tuple has been added) and checks to see if the pattern holds, returning 'REJECT' if the pattern breaks, and 'ACCEPT' if the pattern holds.

***SQL Prototype -- implemented in our python code in function named 'assertion'***
CREATE ASSERTION NoIncest CHECK (
	NOT EXISTS (
		SELECT name1, surname1, name2, surname2
		FROM Romances
		WHERE surname1 = surname2 AND surname1 <> 'Lannister' AND surname1 <> 		'Targaryen')
);